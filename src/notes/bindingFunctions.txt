1)  Utilizar o seguinte código no constructor da classe:
    
    //this.handleClick = this.handleClick.bind(this)

    /*
        this.handleClick.bind(this, 'Parameter01', 'Parameter02') - handleClick irá receber 'Parameter01' como primeiro parâmetro e não 'this'
        
        handleClick(param01, param02){
            this.setState(previousState => ({
                isToggleOn: !previousState.isToggleOn
        }))
    }
    */
    Geralmente, se você referir a um método sem () depois dele, como onClick={this.handleClick}, você deve fazer o bind manual deste método, como mostrado acima.


2)  Essa sintaxe garante que o `this` seja vinculado ao handleClick. Atenção: essa é uma sintaxe *experimental*.

    //    handleClick = () => {
    //        console.log('this is:', this);
    //     }
    

3)  Essa sintaxe garante que o `this` seja vinculado ao handleClick.
        return (
            <button onClick={() => this.handleClick()}>
            Click me
            </button>
        );
    O problema com esta sintaxe é que um callback diferente é criado toda vez que o LoggingButton é renderizado.
    Na maioria dos casos, tudo bem. No entanto, se esse callback for passado para componentes inferiores através de props,
    esses componentes poderão fazer uma renderização extra.
    Geralmente recomendamos a vinculação no construtor ou a sintaxe dos campos de classe para evitar esse tipo de problema de desempenho.